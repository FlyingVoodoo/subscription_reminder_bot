import logging
import datetime
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ db_manager.py
from db_manager import get_subscriptions_for_reminders, update_reminder_status, get_overdue_subscriptions

logger = logging.getLogger(__name__)

# constants
REMINDER_STATUS_NONE = 0
REMINDER_STATUS_3_DAYS = 1
REMINDER_STATUS_1_DAY = 2
REMINDER_STATUS_OVERDUE = 3

async def check_and_send_reminders(context: ContextTypes.DEFAULT_TYPE) -> None:

    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è...")

    # 3 days before
    subscriptions_3_days = await get_subscriptions_for_reminders(3)
    if subscriptions_3_days:
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(subscriptions_3_days)} –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 3 –¥–Ω—è.")
        for sub_id, user_id, service_name, amount, next_payment_date, current_status in subscriptions_3_days:
            message = (
                f"‚è∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ!** ‚è∞\n\n"
                f"–°–µ—Ä–≤–∏—Å: **{service_name}**\n"
                f"–°—É–º–º–∞: **{amount:.2f}**\n"
                f"–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã: **{next_payment_date}** (—á–µ—Ä–µ–∑ 3 –¥–Ω—è)\n\n"
                f"–ß—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—É—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: `/paid {sub_id}`"
            )
            try:
                await context.bot.send_message(chat_id=user_id, text=message, parse_mode=ParseMode.MARKDOWN)
                await update_reminder_status(sub_id, REMINDER_STATUS_3_DAYS)
                logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 3 –¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ID {sub_id}, user {user_id}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ID {sub_id}, user {user_id}: {e}")
    else:
        logger.info("–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 3 –¥–Ω—è.")

    # 1 day before
    subscriptions_1_day = await get_subscriptions_for_reminders(1)
    if subscriptions_1_day:
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(subscriptions_1_day)} –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 1 –¥–µ–Ω—å.")
        for sub_id, user_id, service_name, amount, next_payment_date, current_status in subscriptions_1_day:
            message = (
                f"‚ùóÔ∏è **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!** ‚ùóÔ∏è\n\n"
                f"–ó–∞–≤—Ç—Ä–∞, **{next_payment_date}**, –Ω–∞—Å—Ç—É–ø–∞–µ—Ç —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏:\n"
                f"–°–µ—Ä–≤–∏—Å: **{service_name}**\n"
                f"–°—É–º–º–∞: **{amount:.2f}**\n\n"
                f"–ß—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—É—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: `/paid {sub_id}`"
            )
            try:
                await context.bot.send_message(chat_id=user_id, text=message, parse_mode=ParseMode.MARKDOWN)
                await update_reminder_status(sub_id, REMINDER_STATUS_1_DAY)
                logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ID {sub_id}, user {user_id}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ID {sub_id}, user {user_id}: {e}")
    else:
        logger.info("–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 1 –¥–µ–Ω—å.")

    overdue_subscriptions = await get_overdue_subscriptions()
    if overdue_subscriptions:
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(overdue_subscriptions)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
        for sub_id, user_id, service_name, amount, next_payment_date, current_status in overdue_subscriptions:
            message = (
                f"üö® **–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞!** üö®\n\n"
                f"–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ **{service_name}** –Ω–∞ —Å—É–º–º—É **{amount:.2f}** –∏—Å—Ç–µ–∫ **{next_payment_date}**.\n\n"
                f"–ß—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—É—é –∏ —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: `/paid {sub_id}`"
            )
            try:
                await context.bot.send_message(chat_id=user_id, text=message, parse_mode=ParseMode.MARKDOWN)
                await update_reminder_status(sub_id, REMINDER_STATUS_OVERDUE)
                logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ID {sub_id}, user {user_id}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ID {sub_id}, user {user_id}: {e}")
    else:
        logger.info("–ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")

