import datetime
import logging
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler, filters
from telegram.constants import ParseMode
from db_manager import add_subscription, get_subscribtion_by_user, delete_subscription, update_subscription_after_payment, update_reminder_status, get_subscriptions_for_reminders

ADD_SERVICE_NAME, ADD_AMOUNT, ADD_DATE = range(3)

DELETE_ID, DELETE_CONFIRMATION = range(3, 5)

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n"
        "–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π. "
        "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –æ–ø–ª–∞—Ç–∞—Ö, —á—Ç–æ–±—ã —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª!\n\n"
        "**–ß—Ç–æ —è —É–º–µ—é:**\n"
        "‚ú® –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: **/add**\n"
        "üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏: **/list**\n"
        "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—É—é: **/paid <ID>**\n"
        "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: **/delete <ID>**\n\n"
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ **/help**.",
        parse_mode=ParseMode.MARKDOWN 
    )

async def help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ —è –ø–æ–Ω–∏–º–∞—é:\n\n"
        "**/add** - –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –Ø –ø–æ–ø—Ä–æ—à—É –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—É–º–º—É –∏ –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã.\n"
        "**/list** - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∏—Ö ID, –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏, —Å—É–º–º–∞–º–∏ –∏ –¥–∞—Ç–∞–º–∏ –æ–ø–ª–∞—Ç—ã.\n"
        "**/paid <ID>** - –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—É—é. –Ø –ø–µ—Ä–µ–Ω–µ—Å—É –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥ –∏ —Å–±—Ä–æ—à—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n"
        "   _–ü—Ä–∏–º–µ—Ä:_ `/paid 123` (–≥–¥–µ 123 - —ç—Ç–æ ID –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ /list)\n"
        "**/delete <ID>** - –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ —Ç–≤–æ–µ–≥–æ —Å–ø–∏—Å–∫–∞.\n"
        "   _–ü—Ä–∏–º–µ—Ä:_ `/delete 456`\n"
        "**/cancel** - –û—Ç–º–µ–Ω–∏—Ç—å –ª—é–±—É—é —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ç—ã –¥–æ–±–∞–≤–ª—è–µ—à—å –ø–æ–¥–ø–∏—Å–∫—É, –Ω–æ –ø–µ—Ä–µ–¥—É–º–∞–ª).\n\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å!",
        parse_mode=ParseMode.MARKDOWN 
    )

# --- Function for command /add (Conversation Handler) ---

async def add_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Starting add-process and asks for name of serv"""
    await update.message.reply_text('–û—Ç–ª–∏—á–Ω–æ! –î–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É—é –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞:')
    return ADD_SERVICE_NAME 

async def add_service_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Getiing name of serv and asking user for summ"""
    context.user_data['service_name'] = update.message.text
    await update.message.reply_text(f'–•–æ—Ä–æ—à–æ, "{context.user_data["service_name"]}". –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä), "9.99"):')
    return ADD_AMOUNT
async def add_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        ammount = float(update.message.text.replace('.', '.'))
        context.user_data['amount'] = ammount
        await update.message.reply_text('–ü–æ–Ω—è–ª. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2025-07-15"):')
        return ADD_DATE
    except ValueError:
        await update.message.reply_text('–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "9.99"):')
        return ADD_AMOUNT
    
async def add_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    date_str = update.message.text.strip()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{date_str}'")

    try:
        parsed_date = datetime.datetime.strptime(date_str, '%Y-%m-%d').date()
        logging.info(f"–î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Ä–µ–ø–∞—Ä—Å–µ–Ω–∞: {parsed_date}")

        if parsed_date < datetime.date.today():
            await update.message.reply_text("–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.")
            return ADD_DATE
        
        await add_subscription(
            user_id=update.effective_user.id,
            service_name=context.user_data['service_name'],
            amount=context.user_data['amount'],
            next_payment_date=date_str
        )
        await update.message.reply_text(
            f"–û—Ç–ª–∏—á–Ω–æ! –ü–æ–¥–ø–∏—Å–∫–∞ '{context.user_data['service_name']}' –Ω–∞ —Å—É–º–º—É {context.user_data['amount']} RUB. "
            f"—Å–æ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç–æ–π {date_str} –¥–æ–±–∞–≤–ª–µ–Ω–∞."
        )
        return ConversationHandler.END
    except ValueError as e:
        logging.info(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{date_str}': {e}")
        await update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:')
        return ADD_DATE
    
async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:

    logging.info(f"–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    
    if 'service_name' in context.user_data:
        del context.user_data['service_name']
    if 'amount' in context.user_data:
        del context.user_data['amount']
    
    await update.message.reply_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.')
    return ConversationHandler.END

async def cancel_already_in_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:

    await update.message.reply_text('–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.')
    
async def list_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    subscriptions = await get_subscribtion_by_user(user_id)

    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –ë–î: {subscriptions}")

    if not subscriptions:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π!")
        return
    
    message_text = "–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
    for sub_id, service_name, amount, next_payment_date in subscriptions:
        message_text += f"**ID {sub_id}**\n" \
                        f"–°–µ—Ä–≤–∏—Å: {service_name}\n" \
                        f"–°—É–º–º–∞: {amount: .2f}\n" \
                        f"–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: {next_payment_date}\n\n"
    await update.message.reply_text(message_text, parse_mode='Markdown')

async def delete_subscription_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
 
    user_id = update.effective_user.id
    args = context.args

    if not args:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å. "
            "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /list.\n"
            "–ü—Ä–∏–º–µ—Ä: `/delete 123`"
        )
        return

    try:
        sub_id_to_delete = int(args[0])
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–¥–ø–∏—Å–∫–∏. "
            "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /list.\n"
            "–ü—Ä–∏–º–µ—Ä: `/delete 123`"
        )
        return

    deleted_successfully = await delete_subscription(user_id, sub_id_to_delete)

    if deleted_successfully:
        await update.message.reply_text(
            f"–ü–æ–¥–ø–∏—Å–∫–∞ —Å ID **{sub_id_to_delete}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞. "
            "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–¥–ø–∏—Å–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É **/list**.",
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(f"–ü–æ–¥–ø–∏—Å–∫–∞ —Å ID **{sub_id_to_delete}** –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.")

async def paid_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:

    user_id = update.effective_user.id
    args = context.args

    print(f"[DEBUG-HANDLERS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª /paid.")

    if not args:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏. "
            "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /list.\n"
            "–ü—Ä–∏–º–µ—Ä: `/paid 123`"
        )
        return

    try:
        sub_id_to_mark_paid = int(args[0])
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–¥–ø–∏—Å–∫–∏. "
            "–ü—Ä–∏–º–µ—Ä: `/paid 123`"
        )
        return

    success, service_name, new_date_str = await update_subscription_after_payment(user_id, sub_id_to_mark_paid)

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ID {sub_id_to_mark_paid} –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—É—é.")
    print(f"[DEBUG-DB] –ü–æ–∏—Å–∫ –ø–æ–¥–ø–∏—Å–∫–∏: user_id={user_id}, sub_id={sub_id_to_mark_paid}")

    if success:
        logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ ID {sub_id_to_mark_paid} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ù–æ–≤–∞—è –¥–∞—Ç–∞: {new_date_str}")
    else:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ID {sub_id_to_mark_paid} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

    if success:
        await update.message.reply_text(
            f"–ü–æ–¥–ø–∏—Å–∫–∞ **'{service_name}'** (ID: {sub_id_to_mark_paid}) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. "
            f"–°–ª–µ–¥—É—é—â–∞—è –¥–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: **{new_date_str}**. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã."
        )
    else:
        await update.message.reply_text(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å ID **{sub_id_to_mark_paid}**. "
            "–í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ–Ω–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º."
        )